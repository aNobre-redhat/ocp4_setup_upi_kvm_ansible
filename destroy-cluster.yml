- name: Destroy clusters UPI on KVM
  hosts: localhost
  gather_facts: false
  become: true
  become_method: ansible.builtin.sudo

  vars:
    start_time: "{{ lookup('pipe', 'date +%s') }}"

  tasks:
    - name: Collect the start time
      ansible.builtin.set_fact:
        start_time: "{{ lookup('pipe', 'date +%s') }}"

    - name: Get a list of all virtual machines
      ansible.builtin.command: virsh list --all --name
      register: vms
      changed_when: vms.rc == 0

    - name: Filter VMs containing 'clustername' in their names
      ansible.builtin.set_fact:
        allvms: "{{ vms.stdout_lines | select('search', clustername) }}"

    - name: Destroy all vms
      community.libvirt.virt:
        command: destroy
        force: true
        name: "{{ item }}"
      loop: "{{ allvms }}"
      ignore_errors: true

    - name: Undefine all vms
      community.libvirt.virt:
        command: undefine
        force: true
        name: "{{ item }}"
      loop: "{{ allvms }}"
      ignore_errors: true

    - name: Delete all network files
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      register: deletefiles
      with_items:
        - "/etc/NetworkManager/dnsmasq.d/{{ clustername }}.conf"
        - "/etc/dnsmasq.{{ clustername }}.addnhosts"
        - "/{{ clusters_dir }}/{{ clustername }}/"

    - name: Restart libvirt when configuring dnsmasq
      ansible.builtin.service:
        name: libvirtd
        state: restarted
      when: deletefiles.changed

    - name: Restart NetworkManager when configuring dnsmasq
      ansible.builtin.service:
        name: NetworkManager
        state: restarted
      when: deletefiles.changed

    - name: Collect the end time
      ansible.builtin.set_fact:
        end_time: "{{ lookup('pipe', 'date +%s') }}"

    - name: Calculate the script execution time
      ansible.builtin.set_fact:
        total_time: "{{ (end_time | int) - (start_time | int) }}"

    - name: Convert the execution time to hour, minute and seconds
      ansible.builtin.set_fact:
        hours: "{{ (total_time | int) // 3600 }}"
        minutes: "{{ ((total_time | int) % 3600) // 60 }}"
        seconds: "{{ (total_time | int) % 60 }}"

    - name: Show the script execution time
      ansible.builtin.debug:
        msg: "The execution time is {{ hours }}h {{ minutes }}m {{ seconds }}s."
