---
- name: Configure HTPasswd Identity Provider and create admin user
  hosts: localhost
  gather_facts: false

  tasks:
    - name: Create the HTPasswd file with admin user
      ansible.builtin.command:
        cmd: htpasswd -c -B -b {{ clusters_dir }}/{{ clustername }}/auth/users.htpasswd {{ admin_user }} {{ htpasswd_pass }}
      args:
        creates: "{{ clusters_dir }}/{{ clustername }}/auth/users.htpasswd"

    - name: Create secret with HTPasswd data in OpenShift
      kubernetes.core.k8s:
        kubeconfig: "{{ clusters_dir }}/{{ clustername }}/auth/kubeconfig"
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: htpass-secret
            namespace: openshift-config
          data:
            htpasswd: "{{ lookup('file', clusters_dir + '/' + clustername + '/auth/users.htpasswd') | b64encode }}"
          type: Opaque

    - name: Configure HTPasswd identity provider
      kubernetes.core.k8s:
        kubeconfig: "{{ clusters_dir }}/{{ clustername }}/auth/kubeconfig"
        state: present
        definition:
          apiVersion: config.openshift.io/v1
          kind: OAuth
          metadata:
            name: cluster
          spec:
            identityProviders:
            - name: my_htpasswd_provider
              mappingMethod: claim
              type: HTPasswd
              htpasswd:
                fileData:
                  name: htpass-secret

    - name: Wait for OAuth to be applied (sleep 30s)
      ansible.builtin.pause:
        seconds: 30

    - name: Test login with the newly created admin user
      ansible.builtin.command:
        cmd: >
          oc login -u {{ admin_user }} -p {{ htpasswd_pass }} --kubeconfig={{ clusters_dir }}/{{ clustername }}/auth/kubeconfig --insecure-skip-tls-verify
      register: login_output
      failed_when: "'Login successful' not in login_output.stdout"

    - name: Grant cluster-admin role to the new admin user
      kubernetes.core.k8s:
        kubeconfig: "{{ clusters_dir }}/{{ clustername }}/auth/kubeconfig"
        state: present
        definition:
          apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRoleBinding
          metadata:
            name: cluster-admin-{{ admin_user }}
          subjects:
          - kind: User
            name: "{{ admin_user }}"
            apiGroup: rbac.authorization.k8s.io
          roleRef:
            kind: ClusterRole
            name: cluster-admin
            apiGroup: rbac.authorization.k8s.io

    - name: Ensure the new admin user has cluster-admin privileges before remove kubeadmin
      ansible.builtin.command:
        cmd: >
          oc auth can-i '*' '*' --as={{ admin_user }} --kubeconfig={{ clusters_dir }}/{{ clustername }}/auth/kubeconfig
      register: check_admin_privileges
      failed_when: "'yes' not in check_admin_privileges.stdout"
      changed_when: false

    - name: Remove kubeadmin user
      kubernetes.core.k8s:
        kubeconfig: "{{ clusters_dir }}/{{ clustername }}/auth/kubeconfig"
        state: absent
        kind: Secret
        name: kubeadmin
        namespace: kube-system
